{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Prologo Esta documentacion figura como un archivo para cursos de arduino. Este repositorio guarda una introduccion basica de programacion y documentacion para usar distintos modulos de Arduino","title":"Prologo"},{"location":"#prologo","text":"Esta documentacion figura como un archivo para cursos de arduino. Este repositorio guarda una introduccion basica de programacion y documentacion para usar distintos modulos de Arduino","title":"Prologo"},{"location":"Introduccion/Bucles%20de%20Control/","text":"Bucles de Control Arduino Arduino tiene en todos los proyectos dos funciones que funcionan a modo de bucles de control, si estos no estan presentes en el programa, el IDE se rehusara a compilarlo. setup El bucle de control setup solo corre una vez cada que se energiza el arduino o se reinicia, generalmente se usa para configurar pines, inicializar buses de comunicacion y enlazar el Arduino con servomotores, entre otras cosas. void setup () { Serial . begin ( 9600 ); // inicializar Serial servo1 . attach ( 3 ); // enlazar servomotor pinMode ( 3 , OUTPUT ); // declarar pines como salida o entrada } loop if / if..else for while switch","title":"Bucles de Control"},{"location":"Introduccion/Bucles%20de%20Control/#bucles-de-control","text":"","title":"Bucles de Control"},{"location":"Introduccion/Bucles%20de%20Control/#arduino","text":"Arduino tiene en todos los proyectos dos funciones que funcionan a modo de bucles de control, si estos no estan presentes en el programa, el IDE se rehusara a compilarlo.","title":"Arduino"},{"location":"Introduccion/Bucles%20de%20Control/#setup","text":"El bucle de control setup solo corre una vez cada que se energiza el arduino o se reinicia, generalmente se usa para configurar pines, inicializar buses de comunicacion y enlazar el Arduino con servomotores, entre otras cosas. void setup () { Serial . begin ( 9600 ); // inicializar Serial servo1 . attach ( 3 ); // enlazar servomotor pinMode ( 3 , OUTPUT ); // declarar pines como salida o entrada }","title":"setup"},{"location":"Introduccion/Bucles%20de%20Control/#loop","text":"","title":"loop"},{"location":"Introduccion/Bucles%20de%20Control/#if-ifelse","text":"","title":"if / if..else"},{"location":"Introduccion/Bucles%20de%20Control/#for","text":"","title":"for"},{"location":"Introduccion/Bucles%20de%20Control/#while","text":"","title":"while"},{"location":"Introduccion/Bucles%20de%20Control/#switch","text":"","title":"switch"},{"location":"Introduccion/Funciones/","text":"Funciones Su nombre proviene de las funciones arimeticas, donde generalmente se trabaja de esta manera: \\[ y = f(x) \\] Donde \\(y\\) es el producto o el resultado de nuestra funcion, y \\(x\\) es la variable que se puede cambiar en la formula para que de como resultado distintos valores de \\(y\\) En programacion se trabaja de una manera similar: tipo_de_resultado funcion ( entrada 1 , entrada 2 ) { // funcion o programa a realizar devuelve resultado ; } Ejemplo si se tuviera una funcion que sume dos numeros se puede escribir algo simple como una suma, suponiendo que estamos sumando solo enteros \\[ y = suma(a,b) \\] mas detallado se veria asi: \\[ y = a + b \\] en programacion se veria algo similar a: int suma ( int a , int b ) { // ponemos una variable para guardar el resultado de la suma int y ; // luego sumamos y = a + b ; // luego devolvemos el resultado para que lo use el resto del programa return y ; } voids las funciones declaradas como void no necesita devolver ningun valor","title":"Funciones"},{"location":"Introduccion/Funciones/#funciones","text":"Su nombre proviene de las funciones arimeticas, donde generalmente se trabaja de esta manera: \\[ y = f(x) \\] Donde \\(y\\) es el producto o el resultado de nuestra funcion, y \\(x\\) es la variable que se puede cambiar en la formula para que de como resultado distintos valores de \\(y\\) En programacion se trabaja de una manera similar: tipo_de_resultado funcion ( entrada 1 , entrada 2 ) { // funcion o programa a realizar devuelve resultado ; }","title":"Funciones"},{"location":"Introduccion/Funciones/#ejemplo","text":"si se tuviera una funcion que sume dos numeros se puede escribir algo simple como una suma, suponiendo que estamos sumando solo enteros \\[ y = suma(a,b) \\] mas detallado se veria asi: \\[ y = a + b \\] en programacion se veria algo similar a: int suma ( int a , int b ) { // ponemos una variable para guardar el resultado de la suma int y ; // luego sumamos y = a + b ; // luego devolvemos el resultado para que lo use el resto del programa return y ; }","title":"Ejemplo"},{"location":"Introduccion/Funciones/#voids","text":"las funciones declaradas como void no necesita devolver ningun valor","title":"voids"},{"location":"Introduccion/Sketches%20Basicos/","text":"","title":"Sketches Basicos"},{"location":"Introduccion/Variables/","text":"Variables Definicion Las variables son espacios en memoria en los que se pueden guardar determinados tipos de datos. Estas son las variables mas usuales que se usan. La extension maxima de las variables aplica al arduino Uno o placas equivalentes (que lleven de CPU un ATMEGA328-P ) Variable Uso Extension int Recibe / guarda numeros enteros positivos y negativos -32,768 - 32,767 long igual que int pero soporta mayores cantidades 2,147,483,648 - 2,147,483,647 double/float se usan para guardar numeros decimales y al mismo tiempo puede usar una cantidad aun mas grande que un long 8.5, -230.45687 char Guarda caracteres alfanumericos y simbolos a, A, b, z, 0...9, @, #, $, % String Guarda grupos de caracteres como si fuera una lista: palabras u oraciones enteras \"hola\" , \"Hola Mundo\" Sintaxis Todos los tipos de variables se pueden usar de dos maneras: Creando una variable con un valor inicial int mi_variable = 1234 String palabra = \"asdfghjkl\" String oracion = \"Hay una casa en la pradera.\" float temperatura = 25.9 Declarando solo la variable, usar un valor inicial no es necesario int algo ; double altura ; String fecha ; Algunos detalles float / double Por las capacidades limitadas del Arduino float y double funcionan de la misma manera. float y double solo permiten ocupar de 6 a 7 numeros en total, si se usaran mas numeros, la variable va a descartar los numeros que tenga en exceso.","title":"Variables"},{"location":"Introduccion/Variables/#variables","text":"","title":"Variables"},{"location":"Introduccion/Variables/#definicion","text":"Las variables son espacios en memoria en los que se pueden guardar determinados tipos de datos. Estas son las variables mas usuales que se usan. La extension maxima de las variables aplica al arduino Uno o placas equivalentes (que lleven de CPU un ATMEGA328-P ) Variable Uso Extension int Recibe / guarda numeros enteros positivos y negativos -32,768 - 32,767 long igual que int pero soporta mayores cantidades 2,147,483,648 - 2,147,483,647 double/float se usan para guardar numeros decimales y al mismo tiempo puede usar una cantidad aun mas grande que un long 8.5, -230.45687 char Guarda caracteres alfanumericos y simbolos a, A, b, z, 0...9, @, #, $, % String Guarda grupos de caracteres como si fuera una lista: palabras u oraciones enteras \"hola\" , \"Hola Mundo\"","title":"Definicion"},{"location":"Introduccion/Variables/#sintaxis","text":"Todos los tipos de variables se pueden usar de dos maneras: Creando una variable con un valor inicial int mi_variable = 1234 String palabra = \"asdfghjkl\" String oracion = \"Hay una casa en la pradera.\" float temperatura = 25.9 Declarando solo la variable, usar un valor inicial no es necesario int algo ; double altura ; String fecha ;","title":"Sintaxis"},{"location":"Introduccion/Variables/#algunos-detalles","text":"","title":"Algunos detalles"},{"location":"Introduccion/Variables/#float-double","text":"Por las capacidades limitadas del Arduino float y double funcionan de la misma manera. float y double solo permiten ocupar de 6 a 7 numeros en total, si se usaran mas numeros, la variable va a descartar los numeros que tenga en exceso.","title":"float / double"}]}