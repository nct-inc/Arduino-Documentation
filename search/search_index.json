{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Prologo Esta documentacion figura como un archivo para cursos de arduino. Este repositorio guarda una introduccion basica de programacion y documentacion para usar distintos modulos de Arduino","title":"Prologo"},{"location":"#prologo","text":"Esta documentacion figura como un archivo para cursos de arduino. Este repositorio guarda una introduccion basica de programacion y documentacion para usar distintos modulos de Arduino","title":"Prologo"},{"location":"Bucles%20de%20Control/","text":"Bucles de Control Bucles propios del arduino Arduino tiene en todos los proyectos dos funciones que funcionan a modo de bucles de control, si estos no estan presentes en el programa, el IDE se rehusara a compilarlo. /* cuando se crea un sketch nuevo, asi es como se ve en el IDE */ void setup () { // put your setup code here, to run once: } void loop () { // put your main code here, to run repeatedly: } setup El bucle de control setup solo corre una vez cada que se energiza el arduino o se reinicia, generalmente se usa para configurar pines, inicializar buses de comunicacion y enlazar el Arduino con servomotores, entre otras cosas. void setup () { Serial . begin ( 9600 ); // inicializar Serial servo1 . attach ( 3 ); // enlazar servomotor pinMode ( 3 , OUTPUT ); // declarar pines como salida o entrada } loop una vez el program llega al bucle de control loop el Arduino repetira lo que sea que este en el de manera indefinida y no saldra de este bucle a no ser que se lo fuerce a salir de este en situaciones especiales, por lo general aqui es donde la gran parte de los programas se escribe. /* este bucle enciende el pin 13 por 1 segundo y luego lo vuelve a apagar por 1 segundo */ void loop () { digitalWrite ( 13 , HIGH ); delay ( 1000 ); digitalWrite ( 13 , LOW ); delay ( 1000 ); } if / if..else if Este bucle de control se usa para ejecutar codigo cuando alguna condicion que se especifique se cumpla. Ejemplo 1 // se asigna 13 a un entero, al que llamaremos x int x = 15 ; // se verifica si 15 es mayor a 13, si es verdad se muestra una String por el monitor serial if ( x > 13 ) { Serial . println ( \"x es mayor a 13\" ); } Ejemplo 2 /* este bucle enciende el pin 13 si mandamos una se\u00f1al de 5V(HIGH) al pin 2 dentro de */ if ( digitalread ( 2 ) == HIGH ) { digitalWrite ( 13 , HIGH ); // no se olviden del punto y la coma } if..else se puede usar else cuando se quiere hacer algo en caso de que la condicion analizada en el if sea falsa Ejemplo 1 // se tiene un boton en el pin 2, si llega una se\u00f1al de HIGH se enciende un LED en el pin 7, si esta no se recibe, el LED se apaga if ( digitalRead ( 2 ) == HIGH ) { digitalWrite ( 7 , HIGH ); // encendemos un led en el pin 7 } else { digitalWrite ( 7 , LOW ); // apagamos led en el pin 7 } cuando se necesita abarcar mas casos de condicionales, o cuando se quiere hacer otra cosa en caso de que una primera no se cumpla, se puede usar if de nuevo despues de un else, que permite a\u00f1adir otra condicional al bucle. Ejemplo 2 // se hace algo igual a lo anterior, solo que esta vez una lectura en otro pin apagara el led en lugar de que dejar de apretar el boton lo apague if ( digitalRead ( 2 ) == HIGH ) { digitalWrite ( 7 , HIGH ); // encendemos un led en el pin 7 } else if ( digitalRead ( 3 ) == HIGH ) { digitalWrite ( 7 , LOW ); // apagamos led en el pin 7 } en algunas ocasiones se puede incluir un else al final que se ejecutara si es que ninguno de los if 's anteriores resultaron verdaderos: Ejemplo 3 /* imaginemos dos botones, uno en el pin 2 y otro em el pin 3, y dos lEDs, uno en el pin 7 y otro en el pin 8 */ // si presionamos el boton en el pin 2 if ( digitalRead ( 2 ) == HIGH ) { digitalWrite ( 7 , HIGH ); // encendemos un led en el pin 7 } // si el boton 2 no esta presionado, procedemos a ver si el pin 3 esta presionado else if ( digitalRead ( 3 ) == HIGH ) { digitalWrite ( 8 , HIGH ); // encendemos otro en el pin 8 } // finalmente si ninguno de los botones esta presionado else { // apagamos todos los LEDs digitalWrite ( 7 , LOW ); digitalWrite ( 8 , LOW ); } for el ciclo for se utiliza para repetir partes de codigo un determinado numero de veces, para funcionar, necesita 3 partes en este orden: Una variable de control , la cual se ocupa por lo general cuantas veces se repetira el ciclo Una condicion de salida , el ciclo continuara ejecutandose hasta que la condicion de salida ya no se cumpla Un parametro de incremento , cada que se termine de ejecutar el bucle este parametro incrementara o configurara la variable de control while switch","title":"Bucles de Control"},{"location":"Bucles%20de%20Control/#bucles-de-control","text":"","title":"Bucles de Control"},{"location":"Bucles%20de%20Control/#bucles-propios-del-arduino","text":"Arduino tiene en todos los proyectos dos funciones que funcionan a modo de bucles de control, si estos no estan presentes en el programa, el IDE se rehusara a compilarlo. /* cuando se crea un sketch nuevo, asi es como se ve en el IDE */ void setup () { // put your setup code here, to run once: } void loop () { // put your main code here, to run repeatedly: }","title":"Bucles propios del arduino"},{"location":"Bucles%20de%20Control/#setup","text":"El bucle de control setup solo corre una vez cada que se energiza el arduino o se reinicia, generalmente se usa para configurar pines, inicializar buses de comunicacion y enlazar el Arduino con servomotores, entre otras cosas. void setup () { Serial . begin ( 9600 ); // inicializar Serial servo1 . attach ( 3 ); // enlazar servomotor pinMode ( 3 , OUTPUT ); // declarar pines como salida o entrada }","title":"setup"},{"location":"Bucles%20de%20Control/#loop","text":"una vez el program llega al bucle de control loop el Arduino repetira lo que sea que este en el de manera indefinida y no saldra de este bucle a no ser que se lo fuerce a salir de este en situaciones especiales, por lo general aqui es donde la gran parte de los programas se escribe. /* este bucle enciende el pin 13 por 1 segundo y luego lo vuelve a apagar por 1 segundo */ void loop () { digitalWrite ( 13 , HIGH ); delay ( 1000 ); digitalWrite ( 13 , LOW ); delay ( 1000 ); }","title":"loop"},{"location":"Bucles%20de%20Control/#if-ifelse","text":"","title":"if / if..else"},{"location":"Bucles%20de%20Control/#if","text":"Este bucle de control se usa para ejecutar codigo cuando alguna condicion que se especifique se cumpla.","title":"if"},{"location":"Bucles%20de%20Control/#ejemplo-1","text":"// se asigna 13 a un entero, al que llamaremos x int x = 15 ; // se verifica si 15 es mayor a 13, si es verdad se muestra una String por el monitor serial if ( x > 13 ) { Serial . println ( \"x es mayor a 13\" ); }","title":"Ejemplo 1"},{"location":"Bucles%20de%20Control/#ejemplo-2","text":"/* este bucle enciende el pin 13 si mandamos una se\u00f1al de 5V(HIGH) al pin 2 dentro de */ if ( digitalread ( 2 ) == HIGH ) { digitalWrite ( 13 , HIGH ); // no se olviden del punto y la coma }","title":"Ejemplo 2"},{"location":"Bucles%20de%20Control/#ifelse","text":"se puede usar else cuando se quiere hacer algo en caso de que la condicion analizada en el if sea falsa","title":"if..else"},{"location":"Bucles%20de%20Control/#ejemplo-1_1","text":"// se tiene un boton en el pin 2, si llega una se\u00f1al de HIGH se enciende un LED en el pin 7, si esta no se recibe, el LED se apaga if ( digitalRead ( 2 ) == HIGH ) { digitalWrite ( 7 , HIGH ); // encendemos un led en el pin 7 } else { digitalWrite ( 7 , LOW ); // apagamos led en el pin 7 } cuando se necesita abarcar mas casos de condicionales, o cuando se quiere hacer otra cosa en caso de que una primera no se cumpla, se puede usar if de nuevo despues de un else, que permite a\u00f1adir otra condicional al bucle.","title":"Ejemplo 1"},{"location":"Bucles%20de%20Control/#ejemplo-2_1","text":"// se hace algo igual a lo anterior, solo que esta vez una lectura en otro pin apagara el led en lugar de que dejar de apretar el boton lo apague if ( digitalRead ( 2 ) == HIGH ) { digitalWrite ( 7 , HIGH ); // encendemos un led en el pin 7 } else if ( digitalRead ( 3 ) == HIGH ) { digitalWrite ( 7 , LOW ); // apagamos led en el pin 7 } en algunas ocasiones se puede incluir un else al final que se ejecutara si es que ninguno de los if 's anteriores resultaron verdaderos:","title":"Ejemplo 2"},{"location":"Bucles%20de%20Control/#ejemplo-3","text":"/* imaginemos dos botones, uno en el pin 2 y otro em el pin 3, y dos lEDs, uno en el pin 7 y otro en el pin 8 */ // si presionamos el boton en el pin 2 if ( digitalRead ( 2 ) == HIGH ) { digitalWrite ( 7 , HIGH ); // encendemos un led en el pin 7 } // si el boton 2 no esta presionado, procedemos a ver si el pin 3 esta presionado else if ( digitalRead ( 3 ) == HIGH ) { digitalWrite ( 8 , HIGH ); // encendemos otro en el pin 8 } // finalmente si ninguno de los botones esta presionado else { // apagamos todos los LEDs digitalWrite ( 7 , LOW ); digitalWrite ( 8 , LOW ); }","title":"Ejemplo 3"},{"location":"Bucles%20de%20Control/#for","text":"el ciclo for se utiliza para repetir partes de codigo un determinado numero de veces, para funcionar, necesita 3 partes en este orden: Una variable de control , la cual se ocupa por lo general cuantas veces se repetira el ciclo Una condicion de salida , el ciclo continuara ejecutandose hasta que la condicion de salida ya no se cumpla Un parametro de incremento , cada que se termine de ejecutar el bucle este parametro incrementara o configurara la variable de control","title":"for"},{"location":"Bucles%20de%20Control/#while","text":"","title":"while"},{"location":"Bucles%20de%20Control/#switch","text":"","title":"switch"},{"location":"Funciones/","text":"Funciones Su nombre proviene de las funciones arimeticas, donde generalmente se trabaja de esta manera: \\[ y = f(x) \\] Donde \\(y\\) es el producto o el resultado de nuestra funcion, y \\(x\\) es la variable que se puede cambiar en la formula para que de como resultado distintos valores de \\(y\\) En programacion se trabaja de una manera similar: tipo_de_resultado funcion ( entrada 1 , entrada 2 ) { // funcion o programa a realizar devuelve resultado ; } Ejemplo si se tuviera una funcion que sume dos numeros se puede escribir algo simple como una suma, suponiendo que estamos sumando solo enteros \\[ y = suma(a,b) \\] mas detallado se veria asi: \\[ y = a + b \\] en programacion se veria algo similar a: int suma ( int a , int b ) { // ponemos una variable para guardar el resultado de la suma int y ; // luego sumamos y = a + b ; // luego devolvemos el resultado para que lo use el resto del programa return y ; } voids las funciones declaradas como void no necesita devolver ningun valor","title":"Funciones"},{"location":"Funciones/#funciones","text":"Su nombre proviene de las funciones arimeticas, donde generalmente se trabaja de esta manera: \\[ y = f(x) \\] Donde \\(y\\) es el producto o el resultado de nuestra funcion, y \\(x\\) es la variable que se puede cambiar en la formula para que de como resultado distintos valores de \\(y\\) En programacion se trabaja de una manera similar: tipo_de_resultado funcion ( entrada 1 , entrada 2 ) { // funcion o programa a realizar devuelve resultado ; }","title":"Funciones"},{"location":"Funciones/#ejemplo","text":"si se tuviera una funcion que sume dos numeros se puede escribir algo simple como una suma, suponiendo que estamos sumando solo enteros \\[ y = suma(a,b) \\] mas detallado se veria asi: \\[ y = a + b \\] en programacion se veria algo similar a: int suma ( int a , int b ) { // ponemos una variable para guardar el resultado de la suma int y ; // luego sumamos y = a + b ; // luego devolvemos el resultado para que lo use el resto del programa return y ; }","title":"Ejemplo"},{"location":"Funciones/#voids","text":"las funciones declaradas como void no necesita devolver ningun valor","title":"voids"},{"location":"Sketches%20Basicos/","text":"","title":"Sketches Basicos"},{"location":"Variables/","text":"Variables Definicion Las variables son espacios en memoria en los que se pueden guardar determinados tipos de datos. Estas son las variables mas usuales que se usan. La extension maxima de las variables aplica al arduino Uno o placas equivalentes (que lleven de CPU un ATMEGA328-P ) Variable Uso Extension int Recibe / guarda numeros enteros positivos y negativos -32,768 - 32,767 long igual que int pero soporta mayores cantidades 2,147,483,648 - 2,147,483,647 double/float se usan para guardar numeros decimales y al mismo tiempo puede usar una cantidad aun mas grande que un long 8.5, -230.45687 char Guarda caracteres alfanumericos y simbolos a, A, b, z, 0...9, @, #, $, % String Guarda grupos de caracteres como si fuera una lista: palabras u oraciones enteras \"hola\" , \"Hola Mundo\" Sintaxis Todos los tipos de variables se pueden usar de dos maneras: Creando una variable con un valor inicial int mi_variable = 1234 String palabra = \"asdfghjkl\" String oracion = \"Hay una casa en la pradera.\" float temperatura = 25.9 Declarando solo la variable, usar un valor inicial no es necesario int algo ; double altura ; String fecha ; Algunos detalles float / double Por las capacidades limitadas del Arduino float y double funcionan de la misma manera. float y double solo permiten ocupar de 6 a 7 numeros en total, si se usaran mas numeros, la variable va a descartar los numeros que tenga en exceso.","title":"Variables"},{"location":"Variables/#variables","text":"","title":"Variables"},{"location":"Variables/#definicion","text":"Las variables son espacios en memoria en los que se pueden guardar determinados tipos de datos. Estas son las variables mas usuales que se usan. La extension maxima de las variables aplica al arduino Uno o placas equivalentes (que lleven de CPU un ATMEGA328-P ) Variable Uso Extension int Recibe / guarda numeros enteros positivos y negativos -32,768 - 32,767 long igual que int pero soporta mayores cantidades 2,147,483,648 - 2,147,483,647 double/float se usan para guardar numeros decimales y al mismo tiempo puede usar una cantidad aun mas grande que un long 8.5, -230.45687 char Guarda caracteres alfanumericos y simbolos a, A, b, z, 0...9, @, #, $, % String Guarda grupos de caracteres como si fuera una lista: palabras u oraciones enteras \"hola\" , \"Hola Mundo\"","title":"Definicion"},{"location":"Variables/#sintaxis","text":"Todos los tipos de variables se pueden usar de dos maneras: Creando una variable con un valor inicial int mi_variable = 1234 String palabra = \"asdfghjkl\" String oracion = \"Hay una casa en la pradera.\" float temperatura = 25.9 Declarando solo la variable, usar un valor inicial no es necesario int algo ; double altura ; String fecha ;","title":"Sintaxis"},{"location":"Variables/#algunos-detalles","text":"","title":"Algunos detalles"},{"location":"Variables/#float-double","text":"Por las capacidades limitadas del Arduino float y double funcionan de la misma manera. float y double solo permiten ocupar de 6 a 7 numeros en total, si se usaran mas numeros, la variable va a descartar los numeros que tenga en exceso.","title":"float / double"}]}